apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    postgres-operator.crunchydata.com/cluster: pyas2postgres
    postgres-operator.crunchydata.com/data: pgbackrest
    postgres-operator.crunchydata.com/pgbackrest: ""
    postgres-operator.crunchydata.com/pgbackrest-dedicated: ""
  name: pyas2postgres-repo-host
  ownerReferences:
  - apiVersion: postgres-operator.crunchydata.com/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: PostgresCluster
    name: pyas2postgres
    uid: 61cd6c40-24f8-4020-8bc3-df9efa28a6b8
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      postgres-operator.crunchydata.com/cluster: pyas2postgres
      postgres-operator.crunchydata.com/pgbackrest: ""
      postgres-operator.crunchydata.com/pgbackrest-dedicated: ""
  serviceName: pyas2postgres-pods
  template:
    metadata:
      creationTimestamp: null
      labels:
        postgres-operator.crunchydata.com/cluster: pyas2postgres
        postgres-operator.crunchydata.com/data: pgbackrest
        postgres-operator.crunchydata.com/pgbackrest: ""
        postgres-operator.crunchydata.com/pgbackrest-dedicated: ""
    spec:
      automountServiceAccountToken: false
      containers:
      - command:
        - pgbackrest
        - server
        env:
        - name: LD_PRELOAD
          value: /usr/lib64/libnss_wrapper.so
        - name: NSS_WRAPPER_PASSWD
          value: /tmp/nss_wrapper/postgres/passwd
        - name: NSS_WRAPPER_GROUP
          value: /tmp/nss_wrapper/postgres/group
        image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:5614fa90c56aac4cd7a9710b7efb24b22e356facbc2e7a52bbeccf5185723199
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - pgbackrest
            - server-ping
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: pgbackrest
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/pgbackrest/server
          name: pgbackrest-server
          readOnly: true
        - mountPath: /pgbackrest/repo1
          name: repo1
        - mountPath: /etc/pgbackrest/conf.d
          name: pgbackrest-config
          readOnly: true
        - mountPath: /tmp
          name: tmp
      - command:
        - bash
        - -ceu
        - --
        - |-
          monitor() {
          exec {fd}<> <(:||:)
          until read -r -t 5 -u "${fd}"; do
            if
              [[ "${filename}" -nt "/proc/self/fd/${fd}" ]] &&
              pkill -HUP --exact --parent=0 pgbackrest
            then
              exec {fd}>&- && exec {fd}<> <(:||:)
              stat --dereference --format='Loaded configuration dated %y' "${filename}"
            elif
              { [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] ||
                [[ "${authority}" -nt "/proc/self/fd/${fd}" ]]
              } &&
              pkill -HUP --exact --parent=0 pgbackrest
            then
              exec {fd}>&- && exec {fd}<> <(:||:)
              stat --format='Loaded certificates dated %y' "${directory}"
            fi
          done
          }; export directory="$1" authority="$2" filename="$3"; export -f monitor; exec -a "$0" bash -ceu monitor
        - pgbackrest-config
        - /etc/pgbackrest/server
        - /etc/pgbackrest/conf.d/~postgres-operator/tls-ca.crt
        - /etc/pgbackrest/conf.d/~postgres-operator_server.conf
        image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:5614fa90c56aac4cd7a9710b7efb24b22e356facbc2e7a52bbeccf5185723199
        imagePullPolicy: IfNotPresent
        name: pgbackrest-config
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/pgbackrest/server
          name: pgbackrest-server
          readOnly: true
        - mountPath: /etc/pgbackrest/conf.d
          name: pgbackrest-config
          readOnly: true
        - mountPath: /tmp
          name: tmp
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      initContainers:
      - command:
        - bash
        - -c
        - mkdir -p /pgbackrest/repo1/log
        image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:5614fa90c56aac4cd7a9710b7efb24b22e356facbc2e7a52bbeccf5185723199
        imagePullPolicy: IfNotPresent
        name: pgbackrest-log-dir
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /pgbackrest/repo1
          name: repo1
        - mountPath: /tmp
          name: tmp
      - command:
        - bash
        - -c
        - "export NSS_WRAPPER_SUBDIR=postgres CRUNCHY_NSS_USERNAME=postgres CRUNCHY_NSS_USER_DESC=\"postgres\"
          \n# Define nss_wrapper directory and passwd & group files that will be utilized
          by nss_wrapper.  The\n# nss_wrapper_env.sh script (which also sets these
          vars) isn't sourced here since the nss_wrapper\n# has not yet been setup,
          and we therefore don't yet want the nss_wrapper vars in the environment.\nmkdir
          -p /tmp/nss_wrapper\nchmod g+rwx /tmp/nss_wrapper\n\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\n#
          create the nss_wrapper directory\nmkdir -p \"${NSS_WRAPPER_DIR}\"\n\n# grab
          the current user ID and group ID\nUSER_ID=$(id -u)\nexport USER_ID\nGROUP_ID=$(id
          -g)\nexport GROUP_ID\n\n# get copies of the passwd and group files\n[[ -f
          \"${NSS_WRAPPER_PASSWD}\" ]] || cp \"/etc/passwd\" \"${NSS_WRAPPER_PASSWD}\"\n[[
          -f \"${NSS_WRAPPER_GROUP}\" ]] || cp \"/etc/group\" \"${NSS_WRAPPER_GROUP}\"\n\n#
          if the username is missing from the passwd file, then add it\nif [[ ! $(cat
          \"${NSS_WRAPPER_PASSWD}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID} ]]; then\n
          \   echo \"nss_wrapper: adding user\"\n    passwd_tmp=\"${NSS_WRAPPER_DIR}/passwd_tmp\"\n
          \   cp \"${NSS_WRAPPER_PASSWD}\" \"${passwd_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
          \"${passwd_tmp}\"\n    # needed for OCP 4.x because crio updates /etc/passwd
          with an entry for USER_ID\n    sed -i \"/${USER_ID}:x:/d\" \"${passwd_tmp}\"\n
          \   printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${GROUP_ID}:${CRUNCHY_NSS_USER_DESC}:${HOME}:/bin/bash\\n'
          >> \"${passwd_tmp}\"\n    envsubst < \"${passwd_tmp}\" > \"${NSS_WRAPPER_PASSWD}\"\n
          \   rm \"${passwd_tmp}\"\nelse\n    echo \"nss_wrapper: user exists\"\nfi\n\n#
          if the username (which will be the same as the group name) is missing from
          group file, then add it\nif [[ ! $(cat \"${NSS_WRAPPER_GROUP}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID}
          ]]; then\n    echo \"nss_wrapper: adding group\"\n    group_tmp=\"${NSS_WRAPPER_DIR}/group_tmp\"\n
          \   cp \"${NSS_WRAPPER_GROUP}\" \"${group_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
          \"${group_tmp}\"\n    printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${CRUNCHY_NSS_USERNAME}\\n'
          >> \"${group_tmp}\"\n    envsubst < \"${group_tmp}\" > \"${NSS_WRAPPER_GROUP}\"\n
          \   rm \"${group_tmp}\"\nelse\n    echo \"nss_wrapper: group exists\"\nfi\n\n#
          export the nss_wrapper env vars\n# define nss_wrapper directory and passwd
          & group files that will be utilized by nss_wrapper\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\nexport
          LD_PRELOAD=/usr/lib64/libnss_wrapper.so\nexport NSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_PASSWD}\"\nexport
          NSS_WRAPPER_GROUP=\"${NSS_WRAPPER_GROUP}\"\n\necho \"nss_wrapper: environment
          configured\"\n"
        image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:5614fa90c56aac4cd7a9710b7efb24b22e356facbc2e7a52bbeccf5185723199
        imagePullPolicy: IfNotPresent
        name: nss-wrapper-init
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroupChangePolicy: OnRootMismatch
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      topologySpreadConstraints:
      - labelSelector:
          matchExpressions:
          - key: postgres-operator.crunchydata.com/data
            operator: In
            values:
            - postgres
            - pgbackrest
          matchLabels:
            postgres-operator.crunchydata.com/cluster: pyas2postgres
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchExpressions:
          - key: postgres-operator.crunchydata.com/data
            operator: In
            values:
            - postgres
            - pgbackrest
          matchLabels:
            postgres-operator.crunchydata.com/cluster: pyas2postgres
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - name: pgbackrest-server
        projected:
          defaultMode: 420
          sources:
          - secret:
              items:
              - key: pgbackrest-repo-host.crt
                path: server-tls.crt
              - key: pgbackrest-repo-host.key
                mode: 384
                path: server-tls.key
              name: pyas2postgres-pgbackrest
      - name: repo1
        persistentVolumeClaim:
          claimName: pyas2postgres-repo1
      - name: pgbackrest-config
        projected:
          defaultMode: 420
          sources:
          - configMap:
              items:
              - key: pgbackrest_repo.conf
                path: pgbackrest_repo.conf
              - key: config-hash
                path: config-hash
              - key: pgbackrest-server.conf
                path: ~postgres-operator_server.conf
              name: pyas2postgres-pgbackrest-config
          - secret:
              items:
              - key: pgbackrest.ca-roots
                path: ~postgres-operator/tls-ca.crt
              - key: pgbackrest-client.crt
                path: ~postgres-operator/client-tls.crt
              - key: pgbackrest-client.key
                mode: 384
                path: ~postgres-operator/client-tls.key
              name: pyas2postgres-pgbackrest
      - emptyDir:
          sizeLimit: 16Mi
        name: tmp
  updateStrategy:
    type: RollingUpdate
